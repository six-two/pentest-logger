#!/usr/bin/env python3
import sys
import os
from typing import Callable
import shutil
import subprocess
from pathlib import Path, PosixPath

# local files
from pt_helper import (
    Command,
    ProcessedCommand,
    ProxySettings,
    Settings,
    ToolWrapper,
    run_with_script,
    load_settings,
    set_debug,
    error,
    warn,
    info,
    debug,
)
from pt_helper.tools import get_tool_wrapper


class CommandLogger:
    def __init__(self, settings: Settings) -> None:
        self.settings = settings

    def process_command(self, cmd: Command) -> ProcessedCommand:
        # Check if a executeable with command_name exists
        if not shutil.which(cmd.name):
            error(f"Command '{cmd.name}' not found")
            sys.exit(1)
        else:
            tool = get_tool_wrapper(cmd.name, self.settings)
            return tool.process_command(cmd)

    def log_arguments(self, cmd: Command, output_dir: str) -> None:
        path = os.path.join(output_dir, "arguments.txt")
        with open(path, "w") as f:
            for arg in [cmd.name, *cmd.args]:
                f.write(f"{arg}\n")

    def log_command(self, command_name: str, arguments: list[str]) -> int:
        cmd = Command(command_name, arguments)
        processed = self.process_command(cmd)
        debug(f"Processed command: {processed}")

        if processed.should_process:
            output_dir = processed.output_dir
            info(f"Writing output to {output_dir}")
            # The folder *should* already exist
            os.makedirs(output_dir, exist_ok=True)

            if processed.should_log_arguments:
                self.log_arguments(processed.rewritten_command, processed.output_dir)

            if processed.should_log_output:
                return run_with_script(processed.rewritten_command, output_dir)
            else:
                return subprocess.call(processed.rewritten_command)
        else:
            return subprocess.call(processed.original_command)


def main(args: list[str]):
    if args:
        settings = load_settings()
        set_debug(settings.debug)
        debug(f"Settings: {settings}")

        cl = CommandLogger(settings)
        return_code = cl.log_command(args[0], args[1:])
        sys.exit(return_code)
    else:
        error("Missing arguments")
        sys.exit(1)


if __name__ == "__main__":
    main(sys.argv[1:])
