import json
import os
import traceback
from typing import NamedTuple

# pip install pyyaml
import yaml

# pip install jsonmerge
import jsonmerge

from pt_helper import debug, info, warn, error


class ProxySettings(NamedTuple):
    enabled: bool
    host: str
    port: int


class UserAgentSettings(NamedTuple):
    enabled: bool
    value: str


class Settings(NamedTuple):
    proxy: ProxySettings
    project_dir: str
    target_arg_marker: str
    debug: bool
    user_agent: UserAgentSettings


class SettingsBuilder:
    def __init__(self, settings: Settings) -> None:
        p = settings.proxy
        ua = settings.user_agent
        self.data = {
            "proxy": {
                "host": p.host,
                "port": p.port,
                "enabled": p.enabled,
            },
            "current_project_path": settings.project_dir,
            "target_argument_marker": settings.target_arg_marker,
            "debug": settings.debug,
            "user_agent": {
                "enabled": ua.enabled,
                "value": ua.value,
            },
        }

    def update(self, settings_data: dict) -> None:
        self.data = jsonmerge.merge(self.data, settings_data)

    def to_settings(self) -> Settings:
        p = self.data["proxy"]
        proxy_host = str(p["host"])
        proxy_port = int(p["port"])
        proxy_enabled = bool(p["enabled"])
        proxy = ProxySettings(host=proxy_host, port=proxy_port, enabled=proxy_enabled)

        project_dir = str(self.data["current_project_path"])
        target_arg_marker = str(self.data["target_argument_marker"])
        debug = bool(self.data["debug"])

        ua_enable = bool(self.data["user_agent"]["enabled"])
        ua_value = str(self.data["user_agent"]["value"])
        ua = UserAgentSettings(ua_enable, ua_value)
        return Settings(
            proxy=proxy,
            project_dir=project_dir,
            target_arg_marker=target_arg_marker,
            debug=debug,
            user_agent=ua,
        )


def _get_default_settings() -> Settings:
    proxy = ProxySettings(host="localhost", port=8080, enabled=False)
    project_dir = os.path.expanduser("~/pt_helper")
    target_arg_marker = "@"
    debug = False
    # IE11, should not be too suspicious
    user_agent = UserAgentSettings(enabled=False, value="Mozilla/5.0 (compatible, MSIE 11, Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko")

    return Settings(
        proxy=proxy,
        project_dir=project_dir,
        target_arg_marker=target_arg_marker,
        debug=debug,
        user_agent=user_agent,
    )


def load_global_settings() -> dict:
    path = os.path.expanduser("~/.config/pt_helper/settings.yaml")
    if not os.path.exists(path):
        warn("[WARN] Global config file not found. It will be created now.")
        config_dir = os.path.dirname(path)
        info(f"Creating dir: {config_dir}")
        os.makedirs(config_dir, exist_ok=True)

        default_settings_dict = SettingsBuilder(DEFAULT_SETTINGS).data
        with open(path, "w") as f:
            yaml.safe_dump(default_settings_dict, f)
        return dict()

    try:
        with open(path, "r") as f:
            return yaml.safe_load(f)
    except:
        error("Error while loading global settings:")
        traceback.print_exc()
        return dict()


def load_project_settings(project_dir: str) -> dict:
    path = os.path.join(project_dir, "pt_helper.yaml")
    if os.path.exists(path):
        try:
            with open(path, "r") as f:
                return yaml.safe_load(f)
        except:
            error("Error while loading global settings:")
            traceback.print_exc()
            return dict()
    else:
        debug("No project specific settings found")
        return dict()


def load_settings() -> Settings:
    sb = SettingsBuilder(DEFAULT_SETTINGS)
    debug(f"Default settings: {json.dumps(sb.data)}")

    sb.update(load_global_settings())
    debug(f"Project settings: {json.dumps(sb.data)}")

    project_dir = sb.data["current_project_path"]
    sb.update(load_project_settings(project_dir))
    debug(f"Default settings: {json.dumps(sb.data)}")

    settings = sb.to_settings()
    return settings


DEFAULT_SETTINGS: Settings = _get_default_settings()
