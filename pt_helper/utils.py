import datetime
import re
from typing import Optional, NamedTuple
from pt_helper import Command, Settings, debug

# I did not include "-v" since it is often used for verbose
DEFAULT_ARGUMENT_BLOCKLIST = ["-h", "--help", "--version"]


def get_timestamp_string() -> str:
    now = datetime.datetime.now()
    format_str = "%Y-%m-%d_%H-%M-%S"
    return now.strftime(format_str)


def command_contains_argument(cmd: Command, match_list: list[str]) -> bool:
    for arg in cmd.args:
        if arg in match_list:
            return True
    return False

DOT = "\\."
IP_PART = r"\d{1,3}"
IP_PART_MINUS = f"{IP_PART}(\\-{IP_PART})?"
CISR = r"/\d{1,2}"

HOSTNAME = "(((?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.)+[A-Za-z]+|localhost)"
HOSTNAME_CISR = HOSTNAME + CISR
IP_ADDRESS = DOT.join(4 * [IP_PART])
IP_RANGE_CISR = IP_ADDRESS + CISR
IP_RANGE_MINUSES = DOT.join(4 * [IP_PART_MINUS])

NMAP_PART = "({})".format(
    "|".join([HOSTNAME, HOSTNAME_CISR, IP_ADDRESS, IP_RANGE_CISR, IP_RANGE_MINUSES])
)
NMAP = f"({NMAP_PART},)*{NMAP_PART}"

ARG_MARKED_BY_USER = 4
ARG_FULL_MATCH = 3
ARG_CONTAINS_MATCH = 2
ARG_NO_FLAG = 1
ARG_FLAG = 0

LEVEL_NAMES = ["(0) Flag", "(1) No flag", "(2) Contains match", "(3) Full match", "(4) Marked by user"]


class ArgumentRatingResult(NamedTuple):
    match_level: int
    match_list: list[str]

class ArgumentRater:
    def __init__(self, settings: Settings, match_pattern_str_list: list[str]) -> None:
        self.settings = settings
        debug("Regexes:")
        for pattern in match_pattern_str_list:
            debug(f"- {pattern}")
        self.match_regex_list = [re.compile(f"^{x}$") for x in match_pattern_str_list]
        self.contains_regex_list = [re.compile(x) for x in match_pattern_str_list]


    def rate_argument(
        self,
        argument: str,
    ) -> int:
        for regex in self.match_regex_list:
            if regex.match(argument):
                return ARG_FULL_MATCH

        for regex in self.contains_regex_list:
            if regex.match(argument):
                return ARG_CONTAINS_MATCH

        if argument.startswith("-"):
            return ARG_FLAG
        else:
            return ARG_NO_FLAG
        
    def remove_target_specifiers(self, cmd: Command) -> Command:
        args = [x for x in cmd.args if x != self.settings.target_arg_marker]
        return cmd._replace(args=args)

    def match_arguments(self, cmd: Command) -> ArgumentRatingResult:
        mark_next = False
        args = []
        for arg in cmd.args:
            if arg == self.settings.target_arg_marker:
                mark_next = True
            else:
                rating = ARG_MARKED_BY_USER if mark_next else self.rate_argument(arg)
                args.append((arg, rating))
                mark_next = False

        debug("Argument ratings")
        for arg, rating in args:
            debug(f"{LEVEL_NAMES[rating]}: {arg}")

        max_rating = max([rating for arg, rating in args])
        match_list = [arg for arg, rating in args if rating == max_rating]
        return ArgumentRatingResult(match_list=match_list, match_level=max_rating)
