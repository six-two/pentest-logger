import shutil
import os
import urllib
import traceback
from pt_helper import ParamManipulator, ParamInfo, Settings, ProxySettings, Command, BaseToolWrapper, info
from pt_helper.utils import ArgumentRater, get_timestamp_string

FLAG_BLOCKLIST = ["--version", "-h", "-hh", "--help"]

# --proxy=PROXY       Use a proxy to connect to the target URL
# proxy value must be in format '(http|https|socks4|socks5)://address:port'
PROXY = ParamInfo("--proxy")

# --output-dir=OUT..  Custom output directory path
DATA_DIR = ParamInfo("--output-dir")

# Target:
# -u URL, --url=URL   Target URL (e.g. "http://www.site.com/vuln.php?id=1")
# -r REQUESTFILE      Load HTTP request from a file
REQUEST_FILE = ParamInfo("-r")
TARGET_URL = ParamInfo("--url", ["-u"])

class Sqlmap(BaseToolWrapper):
    def __init__(self, settings: Settings) -> None:
        super().__init__(settings, FLAG_BLOCKLIST, PROXY, [])
        # Use a shared data dir
        self.data_dir = os.path.join(settings.project_dir, "sqlmap", "data")

    def derive_target(self, cmd: Command) -> str:
        params = ParamManipulator(cmd.args)
        
        # Extract the host from the url param
        url_value = params.get(TARGET_URL)
        if url_value:
            try:
                url = url_value[0]
                return urllib.parse.urlparse(url).netloc
            except:
                traceback.print_exc()
        
        # Extract the host header from the request file
        request_value = params.get(REQUEST_FILE)
        if request_value:
            try:
                with open(request_value[0], "r") as f:
                    for line in f.readlines():
                        if line.lower().startswith("host: "):
                            return line[6:].strip()
            except:
                traceback.print_exc()

    def proxy_format(self, proxy: ProxySettings) -> list[str]:
        return [f"http://{proxy.host}:{proxy.port}"]

    def rewrite_arguments_custom(self, params: ParamManipulator, output_dir: str) -> None:
        request_file_value = params.get(REQUEST_FILE)
        if request_file_value:
            input_file = request_file_value[0]
            output_file = os.path.join(output_dir, "request.txt")
            info(f"Coping request file '{input_file}'")
            shutil.copyfile(input_file, output_file, follow_symlinks=True)

        params.add_if_unset(DATA_DIR, [self.data_dir])
