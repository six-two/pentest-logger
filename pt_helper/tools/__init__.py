from pt_helper import ToolWrapper, Settings, warn
from .curl import Curl
from .fallback import Fallback
from .nmap import Nmap
from .sqlmap import Sqlmap
from .testssl import Testssl

_TOOLS: dict[str, ToolWrapper.__class__] = {
    "curl": Curl,
    "nmap": Nmap,
    "sqlmap": Sqlmap,
    "testssl": Testssl,
    "testssl.sh": Testssl,
}

def get_tool_wrapper(tool: str, settings: Settings) -> ToolWrapper:
    wrapper_class = _TOOLS.get(tool)
    if wrapper_class:
        return wrapper_class(settings)
    else:
        warn(f"No native wrapper for '{tool}' found! Using generic fallback")
        return Fallback(settings)

