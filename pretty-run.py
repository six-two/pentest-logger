#!/usr/bin/env python3
import argparse
import datetime
import subprocess
import sys
import time

RESET="\033[0m"
RED="\033[0;91m"
BLUE="\033[0;94m"
GREEN="\033[0;32m"

# PUT YOUR SHELL HERE, set it to None, to let python choose (probably /bin/sh)
SHELL="/usr/bin/bash"

def c(color: str, msg: str) -> str:
    return f"{color}{msg}{RESET}"

def cprint(color: str, msg: str) -> None:
    print(c(color, msg))

def pretty_time(seconds: float) -> str:
    if seconds < 1:
        millis = int(seconds * 1000)
        return f"{millis}ms"
    elif seconds < 10:
        return f"{seconds:.1f}s"
    elif seconds < 60:
        return f"{int(seconds)}s"
    else:
        minutes = int(seconds / 60)
        seconds = int(seconds) % 60

        if minutes < 60:
            return f"{minutes}m {seconds:02}s"
        else:
            hours = int(minutes / 60)
            minutes = minutes % 60
            return f"{hours}h {minutes:02}m {seconds:02}s"

def print_header(command: str) -> None:
    now = datetime.datetime.utcnow()
    format_str = "%Y-%m-%d %H:%M:%S UTC"
    now_str = now.strftime(format_str)

    cprint(BLUE, f"Date    : {now_str}")
    cprint(BLUE, f"Command : {repr(command)[1:-1]}")

def print_footer(run_time: float, exit_code: int) -> None:
    exit_code_color = GREEN if exit_code == 0 else RED

    line = c(BLUE, "Exited with ")
    line += c(exit_code_color, f"code {exit_code}")
    line += c(BLUE, " after ")
    line += c(exit_code_color, pretty_time(run_time))
    print(line)

def print_interrupted_footer(run_time: float) -> None:
    cprint(RED, f"Interrupted by user (Ctrl-C) after {pretty_time(run_time)}")

def run_main(command):
    print_header(command)
    
    time_start = time.monotonic()
    try:
        if SHELL:
            return_code = subprocess.call([SHELL, "-c", command])
        else:
            return_code = subprocess.call(command, shell=True)
    except KeyboardInterrupt:
        time_diff = time.monotonic() - time_start
        print_interrupted_footer(time_diff)
        sys.exit(1)

    time_diff = time.monotonic() - time_start
    print_footer(time_diff, return_code)
    sys.exit(return_code)

def run_test():
    import sys
    print("Seconds -> Pretty time string")
    print("-----------------------------")
    for i in range(8):
        time = 0.0123
        for _ in range(i):
            time *= 10
        print(f"{time:>10} -> {pretty_time(time)}")

if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    ap.add_argument("command", help="The command to execute")
    ap.add_argument("--test", action="store_true", help="Test the time format code")
    args = ap.parse_args()

    if args.test:
        run_test()
    else:
        run_main(args.command)
