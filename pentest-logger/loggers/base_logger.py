import datetime
import os
from typing import NamedTuple

# I did not include "-v" since it is often used for verbose
DEFAULT_ARGUMENT_BLOCKLIST = ["-h", "--help", "--version"]

def get_timestamp_string() -> str:
    now = datetime.datetime.now()
    format_str = "%Y-%m-%d_%H-%M-%S"
    return now.strftime(format_str)


class Command(NamedTuple):
    name: str
    args: list[str]


class BaseLogger:
    def __init__(self, argument_blocklist: list[str] = DEFAULT_ARGUMENT_BLOCKLIST):
        self.argument_blocklist = set(argument_blocklist)

    def output_folder_path(self, command: Command) -> str:
        """
        This function returns the path (relative to the project root) of the folder where theoutput will be saved
        """
        timestamp = get_timestamp_string()
        return os.path.join(command.name, timestamp)

    def should_be_ignored(self, command: Command) -> bool:
        """
        Returns True, iff the command should not be processed, modified and logged.

        This can be used to not log the command when certain paramenters are used (like --help)
        """
        blocked_args = self.argument_blocklist.intersection(command.args)
        if blocked_args:
            print("[DEBUG] Not logging, because the following argument(s) were found:", blocked_args)
            return True
        else:
            return False

    def should_record_with_script(self, command: Command) -> bool:
        """
        This method returns True, iff the command output should be recorded with script.
        """
        return True

    def should_log_arguments(self, command: Command) -> bool:
        """
        This method returns True, iff the command and arguments should be saved.
        If the command is being rewritten, both the arguments before and after the rewrite will be stored.
        """
        return True

    def rewrite_command(self, command: Command, output_dir: str) -> Command:
        """
        This method allows rewriting the command. This enables stuff like adding an '-oA output.file' to the list of arguments
        """
        return command
