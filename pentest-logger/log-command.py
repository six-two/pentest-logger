#!/usr/bin/env python3
import sys
import os
from typing import Callable
import shutil
from pathlib import Path, PosixPath
# local files
import loggers
from loggers import base_logger, fallback, nmap


LOGGERS: dict[str, base_logger.BaseLogger] = {
    "nmap": nmap.NmapLogger,
}

def get_logger(command_name: str) -> base_logger.BaseLogger:
    # Check if a executeable with command_name exists
    if not shutil.which(command_name):
        print(f"[Error] Command {command_name} not found")
        sys.exit(1)
    else:
        module = LOGGERS.get(command_name, fallback.FallbackLogger)
        return module()

def log_command(project_path: str, command_name: str, arguments: list[str]) -> None:
    logger = get_logger(command_name)
    command = base_logger.Command(command_name, arguments)
    print(command)
    if not logger.should_be_ignored(command):
        output_dir = logger.output_folder_path(command)
        output_dir = os.path.join(project_path, output_dir)
        output_dir = os.path.abspath(output_dir)
        print("Writing output to", output_dir)
        os.makedirs(output_dir)

        rewritten_command = logger.rewrite_command(command, output_dir)
        if logger.should_log_arguments(command):
            print("TODO log arguments")
            if rewritten_command != command:
                print("TODO log rewritten arguments")

        if logger.should_record_with_script(command):
            print("TODO run with script")
        else:
            print("TODO run command")

def main(args: list[str]):
    project_dir = os.path.expanduser("~/pt-log")
    if args:
        log_command(project_dir, args[0], args[1:])
    if not args:
        print("[Error] Missing arguments")

if __name__ == "__main__":
    main(sys.argv[1:])
